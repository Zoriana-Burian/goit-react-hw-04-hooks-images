{"version":3,"sources":["components/Button/Button.module.css","components/ImageGalleryItem/ImageGalleryItem.module.css","components/Modal/Modal.module.css","components/ImageGallery/ImageGallery.module.css","components/Loader/Loader.module.css","components/Section/Section.module.css","components/Searchbar/Searchbar.module.css","services/api-services.js","components/Searchbar/Searchbar.js","components/Button/Button.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Modal/Modal.js","components/Loader/Loader.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","fetchApi","fetchHitsImages","searchQuery","currentPage","axios","get","then","response","data","hits","Searchbar","onSubmit","useState","query","setQuery","className","s","SearchForm","e","preventDefault","type","SearchFormButton","SearchFormButtonLabel","onChange","event","currentTarget","value","SearchFormInput","autoComplete","autoFocus","placeholder","Button","onButton","Butt","onClick","ImageGalleryItem","webformatURL","largeImageURL","clickOpenModal","ImageGalleryItemImage","src","data-source","alt","ImageGallery","map","id","modalRoot","document","querySelector","Modal","onClickModal","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","Overlay","target","LoaderSpiner","loader","color","height","width","timeout","Section","children","section","App","setHits","setCurrentPage","setSearchQuery","setLargeImageURL","isLoading","setIsLoading","showModal","setShowModal","error","setError","newApi","prevHits","catch","finally","onToggleModal","PrevShowModal","dataset","source","length","prevCurrentPage","onScroll","scrollBy","top","documentElement","clientHeight","behavior","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wIACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,OAAS,yB,mBCAvDD,EAAOC,QAAU,CAAC,iBAAmB,2CAA2C,sBAAwB,kD,mBCAxGD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,uB,mBCA3DD,EAAOC,QAAU,CAAC,aAAe,qC,mBCAjCD,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,uCCA5BD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,iBAAmB,oCAAoC,sBAAwB,yCAAyC,gBAAkB,qC,mHCOhOC,EADC,CAAEC,gBALK,SAAC,GAAyC,IAAD,IAAvCC,mBAAuC,MAAzB,GAAyB,MAArBC,mBAAqB,MAAP,EAAO,EAC/D,OAAOC,IAAMC,IAAN,4EAA+EH,EAA/E,iBAAmGC,EAAnG,yDACJG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,U,uBCArB,SAASC,EAAT,GAAgC,IAAZC,EAAW,EAAXA,SAAW,EAChBC,mBAAS,IADO,mBACnCC,EADmC,KAC5BC,EAD4B,KAe1C,OACQ,wBAAQC,UAAWC,IAAEN,UAArB,SACI,uBAAMK,UAAWC,IAAEC,WAAYN,SAVtB,SAAAO,GAClBA,EAAEC,iBAEDR,EAASE,GACTC,EAAS,KAMD,UACI,wBAAQM,KAAK,SAASL,UAAWC,IAAEK,iBAAnC,SACI,sBAAMN,UAAWC,IAAEM,sBAAnB,sBAGf,uBACFC,SApBmB,SAAAC,GAClBV,EAASU,EAAMC,cAAcC,QAoB/BX,UAAWC,IAAEW,gBACbP,KAAK,OACLQ,aAAa,MACbC,WAAS,EACTC,YAAY,kC,qBCjBHC,EAZA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACX,qBAAKjB,UAAWC,IAAEiB,KAAlB,SACI,wBAAQlB,UAAWC,IAAEe,OAAQX,KAAK,SAASc,QAASF,EAApD,0B,iBCUOG,EAZU,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,eAAhC,OACrB,oBAAIvB,UAAWC,IAAEmB,iBAAjB,SACI,qBAAKpB,UAAWC,IAAEuB,sBAAuBC,IAAKJ,EAAcK,cAAaJ,EAAeH,QAASI,EAAgBI,IAAI,Q,iBCW9GC,EAZM,SAAC,GAAD,IAAGlC,EAAH,EAAGA,KAAM6B,EAAT,EAASA,eAAT,OACjB,oBAAIvB,UAAWC,IAAE2B,aAAjB,SACKlC,EAAKmC,KAAI,gBAAGC,EAAH,EAAGA,GAAIT,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAArB,OACN,cAAC,EAAD,CAA2BD,aAAeA,EAAcC,cAAgBA,EAAeC,eAAgBA,GAAhFO,S,iBCF7BC,EAAYC,SAASC,cAAc,eAE1B,SAASC,EAAT,GAAiD,IAAhCC,EAA+B,EAA/BA,aAAcb,EAAiB,EAAjBA,cAE1Cc,qBAAU,WAEN,OADAC,OAAOC,iBAAiB,UAAWC,GAC5B,WACHF,OAAOG,oBAAoB,UAAWD,OAK9C,IAAMA,EAAgB,SAAApC,GACH,WAAXA,EAAEsC,MACEN,KAQX,OAAOO,uBACA,qBAAK1C,UAAWC,IAAE0C,QAASxB,QANZ,SAAAhB,GACfA,EAAEO,gBAAkBP,EAAEyC,QACtBT,KAIA,SACI,8BAAK,qBAAKnC,UAAWC,IAAEiC,MAAOT,IAAKH,EAAeK,IAAI,SAE1DI,G,sCC3BG,SAASc,IAClB,OACE,qBAAK7C,UAAWC,IAAE6C,OAAlB,SACC,cAAC,IAAD,CACDzC,KAAK,UACL0C,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,M,qBCIFC,MAbf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OACE,qBAAKpD,UAAWC,IAAEoD,QAAlB,SACMD,KCMK,SAASE,IAAO,IAAD,EACJzD,mBAAS,IADL,mBACrBH,EADqB,KACf6D,EADe,OAEU1D,mBAAS,GAFnB,mBAErBT,EAFqB,KAERoE,EAFQ,OAGU3D,mBAAS,IAHnB,mBAGrBV,EAHqB,KAGRsE,EAHQ,OAIc5D,mBAAS,IAJvB,mBAIrByB,EAJqB,KAINoC,EAJM,OAKM7D,oBAAS,GALf,mBAKrB8D,EALqB,KAKVC,EALU,OAMM/D,oBAAS,GANf,mBAMrBgE,EANqB,KAMVC,EANU,OAOFjE,mBAAS,MAPP,mBAOrBkE,EAPqB,KAOdC,EAPc,KAS7B5B,qBAAU,WACP,GAAKjD,EAAL,CAKEyE,GAAa,GAEbK,EAAO/E,gBAAgB,CAAEC,cAAaC,gBACnCG,MAAK,SAAAG,GACJ6D,GAAQ,SAAAW,GAAQ,4BAAQA,GAAR,YAAqBxE,UAEtCyE,OAAM,SAAAJ,GAAK,OAAIC,EAASD,MACxBK,SAAQ,kBAAMR,GAAa,SAI/B,CAACxE,EAAaD,IAEjB,IAMQkF,EAAgB,WACpBP,GAAa,SAAAQ,GAAa,OAAKT,MAsBjC,OACE,gCACGE,GAAS,mQACV,eAAC,EAAD,WAEGF,GAAa,cAAC3B,EAAD,CAAOC,aAAckC,EAAe/C,cAAeA,IAEjE,cAAC3B,EAAD,CAAWC,SApCG,SAAAE,GAClB2D,EAAe3D,GACf0D,EAAe,GACfD,EAAQ,IACRS,EAAS,SAiCL,cAAC,EAAD,CAActE,KAAMA,EAAM6B,eA3BT,SAAApB,GACrBuD,EAAiBvD,EAAEyC,OAAO2B,QAAQC,QAClCH,OA2BKV,GAAa,cAACd,EAAD,IAEbnD,EAAK+E,OAAS,IAAMd,GACnB,cAAC,EAAD,CAAQ1C,SAlBI,WAClBuC,GAAe,SAAAkB,GAAe,OAAItF,EAAc,MAiBXuF,cAxBrCtC,OAAOuC,SAAS,CACdC,IAAK7C,SAAS8C,gBAAgBC,aAAe,IAC7CC,SAAU,mBC5DlB,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5F,MAAK,YAAkD,IAA/C6F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrC,EAAD,MAEFtB,SAAS4D,eAAe,SAM1BX,M","file":"static/js/main.dd0ee89e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Butt\":\"Button_Butt__1Qp13\",\"Button\":\"Button_Button__1LO78\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__JOO9_\",\"ImageGalleryItemImage\":\"ImageGalleryItem_ImageGalleryItemImage__3H5a4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__9sm9N\",\"Modal\":\"Modal_Modal___Ghxj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__3DFNP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__3-DiC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1T5wc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__IzGc9\",\"SearchForm\":\"Searchbar_SearchForm__gA819\",\"SearchFormButton\":\"Searchbar_SearchFormButton__2j8ou\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__3q7Pq\",\"SearchFormInput\":\"Searchbar_SearchFormInput__3aL-m\"};","import axios from 'axios';\r\n\r\nconst fetchHitsImages = ({searchQuery = '', currentPage = 1}) => {\r\n  return axios.get(`https://pixabay.com/api/?key=19054407-f71c417dea239df63beb23abd&q=${searchQuery}&page=${currentPage}&image_type=photo&orientation=horizontal&per_page=12`)\r\n    .then(response => response.data.hits);\r\n}\r\n\r\nconst fetchApi = { fetchHitsImages }\r\nexport default  fetchApi;","import React, { useState } from 'react';\r\nimport s from './Searchbar.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Searchbar({onSubmit}) {\r\n    const [query, setQuery] = useState('');\r\n\r\n    const handlerChange = event => {\r\n        setQuery(event.currentTarget.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n       e.preventDefault();\r\n\r\n        onSubmit(query);\r\n        setQuery('');\r\n    }\r\n\r\n\r\n    return (\r\n            <header className={s.Searchbar}>\r\n                <form className={s.SearchForm} onSubmit={handleSubmit}>\r\n                    <button type=\"submit\" className={s.SearchFormButton}>\r\n                        <span className={s.SearchFormButtonLabel}>Search</span>\r\n    </button>\r\n\r\n         <input\r\n       onChange={handlerChange}\r\n      className={s.SearchFormInput}\r\n      type=\"text\"\r\n      autoComplete=\"off\"\r\n      autoFocus\r\n      placeholder=\"Search images and photos\"\r\n    />\r\n  </form>\r\n</header>\r\n    );\r\n}\r\n\r\n// class Searchbar extends Component {\r\n//     state = {\r\n//         query: '',\r\n//     }\r\n\r\n//     handlerChange = event => {\r\n//         this.setState({ query: event.currentTarget.value });\r\n//     };\r\n\r\n//     handleSubmit = e => {\r\n//        e.preventDefault();\r\n\r\n//         this.props.onSubmit(this.state.query);\r\n//         this.setState({ query: '' });\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <header className={s.Searchbar}>\r\n//                 <form className={s.SearchForm} onSubmit={this.handleSubmit}>\r\n//                     <button type=\"submit\" className={s.SearchFormButton}>\r\n//                         <span className={s.SearchFormButtonLabel}>Search</span>\r\n//     </button>\r\n\r\n//          <input\r\n//        onChange={this.handlerChange}\r\n//       className={s.SearchFormInput}\r\n//       type=\"text\"\r\n//       autoComplete=\"off\"\r\n//       autoFocus\r\n//       placeholder=\"Search images and photos\"\r\n//     />\r\n//   </form>\r\n// </header>\r\n//         );\r\n//     }\r\n// }\r\n\r\n Searchbar.propTypes = {\r\n     onSubmit: PropTypes.func.isRequired, \r\n }\r\n\r\n// export default Searchbar;","import s from './Button.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({ onButton }) => (\r\n    <div className={s.Butt}>\r\n        <button className={s.Button} type='button' onClick={onButton}>Load more</button> \r\n    </div>\r\n        \r\n);\r\n\r\n\r\nButton.propTypes = {\r\n  onButton: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;","import s from './ImageGalleryItem.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageGalleryItem = ({ webformatURL, largeImageURL, clickOpenModal }) => (\r\n    <li className={s.ImageGalleryItem} >\r\n        <img className={s.ImageGalleryItemImage} src={webformatURL} data-source={largeImageURL} onClick={clickOpenModal} alt=''/>\r\n  </li>\r\n);\r\n\r\nImageGalleryItem.propTypes = {\r\n    clickOpenModal: PropTypes.func.isRequired,\r\n    webformatURL: PropTypes.string.isRequired,\r\n    largeImageURL: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ImageGalleryItem;","import ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\nimport s from './ImageGallery.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageGallery = ({ hits, clickOpenModal }) => (\r\n    <ul className={s.ImageGallery}>\r\n        {hits.map(({ id, webformatURL, largeImageURL }) => \r\n            <ImageGalleryItem key={id} webformatURL={ webformatURL} largeImageURL={ largeImageURL} clickOpenModal={clickOpenModal} />)}\r\n      </ul>\r\n)\r\n\r\nImageGallery.propTypes = {\r\n    clickOpenModal: PropTypes.func.isRequired,\r\n    hits: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ImageGallery;","import React, { useEffect } from 'react';\r\nimport s from './Modal.module.css';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n \r\nexport default function Modal({ onClickModal, largeImageURL }) {\r\n    \r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown)\r\n        }\r\n    });\r\n\r\n\r\n    const handleKeyDown = e => {\r\n        if (e.code === 'Escape') { \r\n                onClickModal();\r\n            }}\r\n\r\n    const handleBackdrop = e => {\r\n        if (e.currentTarget === e.target) {\r\n            onClickModal();\r\n        }\r\n    }\r\n     return createPortal(\r\n            <div className={s.Overlay} onClick={handleBackdrop}>\r\n                <div><img className={s.Modal} src={largeImageURL} alt='' /></div>\r\n            </div>,\r\n            modalRoot\r\n        );\r\n    \r\n}\r\n\r\n// class Modal extends Component {\r\n//     componentDidMount() {\r\n//         window.addEventListener('keydown', this.handleKeyDown)   \r\n//         }\r\n\r\n//     componentWillUnmount() {\r\n//     window.removeEventListener('keydown', this.handleKeyDown)\r\n//     }\r\n \r\n//     handleKeyDown = e => {\r\n//         if (e.code === 'Escape') { \r\n//                 this.props.onClickModal();\r\n//             }}\r\n\r\n//     handleBackdrop = e => {\r\n//         if (e.currentTarget === e.target) {\r\n//             this.props.onClickModal();\r\n//         }\r\n//     }\r\n//     render() {\r\n//         return createPortal(\r\n//             <div className={s.Overlay} onClick={this.handleBackdrop}>\r\n//                 <div><img className={s.Modal} src={this.props.largeImageURL} alt='' /></div>\r\n//             </div>,\r\n//             modalRoot\r\n//         );\r\n//     }\r\n// }\r\n\r\n Modal.propTypes = {\r\n     onClickModal: PropTypes.func.isRequired,\r\n }\r\n\r\n// export default Modal;","import Loader from \"react-loader-spinner\";\r\nimport React from 'react';\r\nimport s from './Loader.module.css';\r\n\r\nexport default function LoaderSpiner () {\r\n      return (\r\n        <div className={s.loader}>\r\n         <Loader\r\n        type=\"Circles\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n        timeout={0} //0 secs\r\n      />     \r\n        </div>\r\n      \r\n    );\r\n  \r\n}","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ children }) {\r\n  return (\r\n    <div className={s.section}>\r\n         {children}\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;","//import logo from './logo.svg';\n//import './App.css';\nimport React, { useEffect, useState } from 'react';\n//import axios from 'axios';\nimport newApi from './services/api-services';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport Button from './components/Button/Button';\nimport ImageGallery from './components/ImageGallery/ImageGallery';\nimport Modal from './components/Modal/Modal';\nimport LoaderSpiner from './components/Loader/Loader';\nimport Section from './components/Section/Section';\n\nexport default function App() {\n  const [hits, setHits] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [largeImageURL, setLargeImageURL] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [error, setError] = useState(null);\n\n useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    const fetchHits = () => {\n      setIsLoading(true);\n\n      newApi.fetchHitsImages({ searchQuery, currentPage })\n        .then(hits => {\n          setHits(prevHits => [...prevHits, ...hits]);\n        })\n        .catch(error => setError(error))\n        .finally(() => setIsLoading(false));\n    };\n\n    fetchHits();\n  }, [currentPage, searchQuery]);\n\n  const onChangeQuery = query => {\n      setSearchQuery(query);\n      setCurrentPage(1);\n      setHits([]);\n      setError(null);\n}\n    const onToggleModal = () => {\n      setShowModal(PrevShowModal => !showModal);\n    }\n  \n    const clickOpenModal = e => {\n      setLargeImageURL(e.target.dataset.source);\n      onToggleModal();\n    };\n\n\n\n    const scrollImages = () => {\n      window.scrollBy({\n        top: document.documentElement.clientHeight - 100,\n        behavior: 'smooth',\n      });\n    }\n\n    const onLoadeMore = () => {\n      setCurrentPage(prevCurrentPage => currentPage + 1)\n    };\n\n\n    return (\n      <div>\n        {error && <h1> Перезавантажте, будь ласка, ще раз сторінку </h1>}\n        <Section>\n        \n          {showModal && <Modal onClickModal={onToggleModal} largeImageURL={largeImageURL} />}\n\n          <Searchbar onSubmit={onChangeQuery} />\n          <ImageGallery hits={hits} clickOpenModal={clickOpenModal} />\n\n          {isLoading && <LoaderSpiner />}\n      \n          {hits.length > 0 && !isLoading &&\n            <Button onButton={onLoadeMore} onScroll={scrollImages()} />\n          }\n        </Section>\n      \n      \n      </div>\n    )\n  }\n  \n\n\n// class App extends Component {\n//   state = {\n//     hits: [],\n//     currentPage: 1,\n//     searchQuery: '',\n//     largeImageURL: '',\n//     isLoading: false,\n//     showModal: false,\n//     error: null,\n//   };\n\n//   onToggleModal = () => {\n//     this.setState(({ showModal }) => ({\n//       showModal: !showModal,\n//     })); \n//   }\n\n//   clickOpenModal = e => {\n//     this.setState({\n//       largeImageURL: e.target.dataset.source}\n//   )\n//     this.onToggleModal();\n//   }\n\n//   scrollImages = () => {\n//      window.scrollBy({\n//   top: document.documentElement.clientHeight - 100,\n//   behavior: 'smooth',\n// });\n//   }\n \n \n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.searchQuery !== this.state.searchQuery) {\n//       this.fetchHits();\n//     }\n//   }\n\n//   onChangeQuery = query => {\n//     this.setState({ searchQuery: query, currentPage: 1, hits: [], error: null, });\n    \n//   }\n  \n//   fetchHits = () => {\n    \n//     const { currentPage, searchQuery } = this.state;\n    \n//     this.setState({ isLoading: true });\n  \n//     const options = { currentPage, searchQuery };\n    \n//     newApi.fetchHitsImages(options)\n//       .then(hits => {\n//         this.setState(prevState => ({\n//           hits: [...prevState.hits, ...hits],\n//           currentPage: prevState.currentPage + 1,\n//         }))\n//       })\n//       .catch(error => this.setState({error}))\n//       .finally(() => this.setState({ isLoading: false }));\n    \n//     //this.scrolImages();\n//   }\n  \n\n//   render() {\n//     const { hits, isLoading, showModal, largeImageURL, error } = this.state;\n\n//     return <div>\n//       {error && <h1> Перезавантажте, будь ласка, ще раз сторінку </h1>}\n//       <Section>\n        \n//         {showModal && <Modal onClickModal={this.onToggleModal} largeImageURL={largeImageURL} />}\n\n//       <Searchbar onSubmit={this.onChangeQuery}/>\n//       <ImageGallery hits={hits} clickOpenModal={this.clickOpenModal} />\n\n//       {isLoading && <LoaderSpiner/>}\n      \n//       {hits.length > 0 && !isLoading &&\n//           <Button onButton={this.fetchHits} onScroll={ this.scrollImages()}/>\n//     }\n//       </Section>\n      \n      \n//     </div>;\n//   }\n// }\n// export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}